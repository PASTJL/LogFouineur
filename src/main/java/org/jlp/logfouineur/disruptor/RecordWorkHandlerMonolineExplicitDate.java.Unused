/*
 * Copyright 2017 Jean-Louis Pasturel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/
package org.jlp.logfouineur.disruptor;

import java.util.HashMap;

import org.jlp.logfouineur.disruptor.LogRecordEvent;
import org.jlp.logfouineur.models.AggLogRecordEvent;

import com.lmax.disruptor.WorkHandler;


// TODO: Auto-generated Javadoc
/**
 * The Class RecordWorkHandlerMonolineExplicitDate.
 */
public class RecordWorkHandlerMonolineExplicitDate  implements WorkHandler<LogRecordEvent>{
	
	/**
	 * Handle event.
	 *
	 * @param event the event
	 * @param sequence the sequence
	 * @param endOfBatch the end of batch
	 */
	public  void handleEvent(LogRecordEvent event, long sequence, boolean endOfBatch) {
		System.out.println("Thread ="+Thread.currentThread().getName()+" ; line ="+event.getContent());
	}
 
 /** The id. */
 public int id=0;
 
 /** The loc hm. */
 private HashMap<Long,AggLogRecordEvent> locHm=new HashMap<Long,AggLogRecordEvent>();
	
	/* (non-Javadoc)
	 * @see com.lmax.disruptor.WorkHandler#onEvent(java.lang.Object)
	 */
	@Override
	public void onEvent(LogRecordEvent event) throws Exception {
		System.out.println("Thread ="+Thread.currentThread().getName()+" ; line ="+event.getContent());
		
	}
	
	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(int id){
		this.id=id;
		locHm.clear();
	}

}
